"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranslationKeyExists = void 0;
const types_1 = require("../../types");
const shopify_translation_keys_json_1 = __importDefault(require("./shopify-translation-keys.json"));
function keyExists(key, pointer) {
    for (const token of key.split('.')) {
        if (typeof pointer !== 'object') {
            return false;
        }
        if (!pointer.hasOwnProperty(token)) {
            return false;
        }
        pointer = pointer[token];
    }
    return true;
}
exports.TranslationKeyExists = {
    meta: {
        code: 'TranslationKeyExists',
        name: 'Reports missing translation keys',
        docs: {
            description: 'Reports missing translation keys',
            recommended: true,
            url: 'https://shopify.dev/docs/themes/tools/theme-check/checks/translation-key-exists',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        const nodes = [];
        let schemaLocales;
        return {
            async LiquidVariable(node) {
                if (node.expression.type !== 'String') {
                    return;
                }
                if (!node.filters.some(({ name }) => ['t', 'translate'].includes(name))) {
                    return;
                }
                nodes.push({
                    translationKey: node.expression.value,
                    startIndex: node.expression.position.start,
                    endIndex: node.expression.position.end,
                });
            },
            async LiquidRawTag(node) {
                var _a;
                if (node.name !== 'schema') {
                    return;
                }
                if (node.body.kind !== 'json') {
                    return;
                }
                const defaultLocale = await context.getDefaultLocale();
                try {
                    schemaLocales = (_a = JSON.parse(node.body.value).locales) === null || _a === void 0 ? void 0 : _a[defaultLocale];
                }
                catch (error) {
                    if (error instanceof SyntaxError) {
                        return;
                    }
                    throw error;
                }
            },
            async onCodePathEnd() {
                const defaultTranslations = await context.getDefaultTranslations();
                const defaultLocale = await context.getDefaultLocale();
                if (!defaultTranslations)
                    return;
                nodes.forEach(({ translationKey, startIndex, endIndex }) => {
                    if (keyExists(translationKey, defaultTranslations) ||
                        keyExists(translationKey, schemaLocales) ||
                        shopify_translation_keys_json_1.default.includes(translationKey)) {
                        return;
                    }
                    let message = `'${translationKey}' does not have a matching entry in 'locales/${defaultLocale}.default.json'`;
                    if (schemaLocales) {
                        message += ` or '${context.relativePath(context.file.absolutePath)}'`;
                    }
                    context.report({
                        message,
                        startIndex,
                        endIndex,
                    });
                });
            },
        };
    },
};
//# sourceMappingURL=index.js.map