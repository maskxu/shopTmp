{"version":3,"file":"dev.js","sourceRoot":"","sources":["../../../../src/cli/commands/theme/dev.ts"],"names":[],"mappings":"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","sourcesContent":["import {themeFlags} from '../../flags.js'\nimport {ensureThemeStore} from '../../utilities/theme-store.js'\nimport ThemeCommand from '../../utilities/theme-command.js'\nimport {dev, refreshTokens, showDeprecationWarnings} from '../../services/dev.js'\nimport {DevelopmentThemeManager} from '../../utilities/development-theme-manager.js'\nimport {findOrSelectTheme} from '../../utilities/theme-selector.js'\nimport {showEmbeddedCLIWarning} from '../../utilities/embedded-cli-warning.js'\nimport {Flags} from '@oclif/core'\nimport {globalFlags} from '@shopify/cli-kit/node/cli'\n\nexport default class Dev extends ThemeCommand {\n  static description =\n    'Uploads the current theme as a development theme to the connected store, then prints theme editor and preview URLs to your terminal. While running, changes will push to the store in real time.'\n\n  static flags = {\n    ...globalFlags,\n    path: themeFlags.path,\n    host: Flags.string({\n      description: 'Set which network interface the web server listens on. The default value is 127.0.0.1.',\n      env: 'SHOPIFY_FLAG_HOST',\n    }),\n    'live-reload': Flags.string({\n      description: `The live reload mode switches the server behavior when a file is modified:\n- hot-reload Hot reloads local changes to CSS and sections (default)\n- full-page  Always refreshes the entire page\n- off        Deactivate live reload`,\n      default: 'hot-reload',\n      options: ['hot-reload', 'full-page', 'off'],\n      env: 'SHOPIFY_FLAG_LIVE_RELOAD',\n    }),\n    poll: Flags.boolean({\n      description: 'Force polling to detect file changes.',\n      env: 'SHOPIFY_FLAG_POLL',\n    }),\n    'theme-editor-sync': Flags.boolean({\n      description: 'Synchronize Theme Editor updates in the local theme files.',\n      env: 'SHOPIFY_FLAG_THEME_EDITOR_SYNC',\n    }),\n    port: Flags.string({\n      description: 'Local port to serve theme preview from.',\n      env: 'SHOPIFY_FLAG_PORT',\n    }),\n    store: themeFlags.store,\n    theme: Flags.string({\n      char: 't',\n      description: 'Theme ID or name of the remote theme.',\n      env: 'SHOPIFY_FLAG_THEME_ID',\n    }),\n    nodelete: Flags.boolean({\n      char: 'n',\n      description: 'Runs the dev command without deleting local files.',\n      env: 'SHOPIFY_FLAG_NODELETE',\n    }),\n    only: Flags.string({\n      char: 'o',\n      multiple: true,\n      description: 'Hot reload only files that match the specified pattern.',\n      env: 'SHOPIFY_FLAG_ONLY',\n    }),\n    ignore: Flags.string({\n      char: 'x',\n      multiple: true,\n      description: 'Skip hot reloading any files that match the specified pattern.',\n      env: 'SHOPIFY_FLAG_IGNORE',\n    }),\n    stable: Flags.boolean({\n      hidden: true,\n      description:\n        'Performs the upload by relying in the legacy upload approach (slower, but it might be more stable in some scenarios)',\n      env: 'SHOPIFY_FLAG_STABLE',\n    }),\n    force: Flags.boolean({\n      hidden: true,\n      char: 'f',\n      description: 'Proceed without confirmation, if current directory does not seem to be theme directory.',\n      env: 'SHOPIFY_FLAG_FORCE',\n    }),\n    password: themeFlags.password,\n    environment: themeFlags.environment,\n    notify: Flags.string({\n      description:\n        'The file path or URL. The file path is to a file that you want updated on idle. The URL path is where you want a webhook posted to report on file changes.',\n      env: 'SHOPIFY_FLAG_NOTIFY',\n    }),\n    open: Flags.boolean({\n      description: 'Automatically launch the theme preview in your default web browser.',\n      env: 'SHOPIFY_FLAG_OPEN',\n      default: false,\n    }),\n  }\n\n  static cli2Flags = [\n    'host',\n    'live-reload',\n    'poll',\n    'theme-editor-sync',\n    'overwrite-json',\n    'port',\n    'theme',\n    'nodelete',\n    'only',\n    'ignore',\n    'stable',\n    'force',\n    'notify',\n  ]\n\n  /**\n   * Executes the theme serve command.\n   * Every 110 minutes, it will refresh the session token.\n   */\n  async run(): Promise<void> {\n    showEmbeddedCLIWarning()\n    showDeprecationWarnings(this.argv)\n\n    let {flags} = await this.parse(Dev)\n    const store = ensureThemeStore(flags)\n\n    const {adminSession, storefrontToken} = await refreshTokens(store, flags.password)\n\n    if (flags.theme) {\n      const filter = {filter: {theme: flags.theme}}\n      const theme = await findOrSelectTheme(adminSession, filter)\n\n      flags = {...flags, theme: theme.id.toString()}\n    } else {\n      const theme = await new DevelopmentThemeManager(adminSession).findOrCreate()\n      const overwriteJson = flags['theme-editor-sync'] && theme.createdAtRuntime\n\n      flags = {...flags, theme: theme.id.toString(), 'overwrite-json': overwriteJson}\n    }\n\n    const flagsToPass = this.passThroughFlags(flags, {allowedFlags: Dev.cli2Flags})\n\n    await dev({\n      adminSession,\n      storefrontToken,\n      directory: flags.path,\n      store,\n      password: flags.password,\n      theme: flags.theme!,\n      host: flags.host,\n      port: flags.port,\n      force: flags.force,\n      open: flags.open,\n      flagsToPass,\n    })\n  }\n}\n"]}